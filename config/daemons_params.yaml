# HOW TO:	Depending on the level needed for publishing/receiving topics, 
# 		it is possible to activate/deactivate required topics.
# 		Example: If you want to subscribe to safetyState you have two options.

#		1. you want to subscribe to  safetyState topic itself by adding a value to the key,
#		e. g. adding a string to the safetyState key, which describes which topic you want to subscribe
#		and commenting eStop and fieldViolation (with a #).
#		In that case you have to create the safetyState msg and fill up the child values (eStop, fieldViolation) by yourself.
#
#		2. you want to subscribe to the child values (eStop, fieldViolation) directly.
#		remove the value from the parent key, here safetyState ( safetyState: should stay alone).
#		uncommend the child keys and add the values if not done so far
#		Add no value to the key, so the program is looking for the subordinated values.
#		it this case it is eStop and fieldViolation

#		!!! NOTE: You can't use key and value pairs for parents and childs at the same time, since the YAML-parser will throw an exception
#       !!! e. g. defining a topic for safetystate and the two childs is not possible

AGV_Data:
    interfaceName: uagv
    majorVersion: v2
    version: 1.1.03
    manufacturer: "template_1"
    serialNumber: "AGV721"

state_daemon:
    topics_publish:
        state: /state 
    topics_subscribe:
        zoneSetId: "/zoneSetId"                      #VDA5050 specific, string
        nodeStates: "/nodeState"                      #VDA5050 specific, array
            # ADD nodeState	
        edgeStates: "/edgeState"                      #VDA5050 specific, array
            # ADD edgeState
        agvPosition: /agvPosition                           #VDA5050 specific + partially covered by ROS common msg, JSON
#             positionInitialized: "/positionInitialized"       #VDA5050 specific, boolean
#             localizationScore: "/localizationScore"         #VDA5050 specific, float64 (Range 0.0-1.0)
#             deviationRange: "/deviationRange"            #VDA5050 specific, float64
        pose: "/odometry"                 #non VDA5050 Topic to gain access to Odometry topic
# #            x: "/TBD13"                         #ROS msg -> nav_msgs/Odometry Message.pose.pose.position.x, float64
# #            y: "/TBD14"                         #ROS msg -> nav_msgs/Odometry Message.pose.pose.position.y, float64
# #            theta: "/TBD15"
        mapId: "/mapId"                     #VDA5050 specific, string
#             mapDescription: "/mapDescription"            #VDA5050 specific, string
        velocity: "/rosVelocity"                            #ROS msg -> nav_msgs/Odometry Message.twist, covered by ROS msg
#            vx: "/TBD19"                        #ROS msg -> nav_msgs/Odometry Message.twist.twist.linear.x, float64
#            vy: "/TBD20"                        #ROS msg -> nav_msgs/Odometry Message.twist.twist.linear.y, float64
#            omega: "/TBD21"
        loads: "/loads"                         #VDA5050 specific, array
            # ADD loads
        driving: "/driving"                       #VDA5050 specific, boolean
        paused: "/paused"                        #VDA5050 specific, boolean
        newBaseRequest: "/newBaseRequest"                #VDA5050 specific, boolean
        distanceSinceLastNode: "/distanceSinceLastNode"         #VDA5050 specific, float64
        actionStates: "/actionStates"                  #VDA5050 specific, array
            # ADD actionStates
        batteryState:                           #VDA5050 specific + partially covered by ROS common msg, JSON
            batteryCharge: "/batteryCharge"             #ROS msg -> sensor_msgs/Batterystate Message.percentage
            batteryVoltage: "/batteryVoltage"            #ROS msg -> sensor_msgs/Batterystate Message.voltage
            batteryHealth: "/batteryHealth"             #VDA5050 specific, int8
            charging: "/charging"                  #VDA5050 specific, bool
            reach: "/reach"                     #VDA5050 specific, uint32
        operatingMode: "/operatingMode"                #VDA5050 specific, string
        errors: "/errors"                    #VDA5050 specific, array
            # ADD error
        information: "/information"                   #VDA5050 specific, array
            # ADD info
        safetyState:                            #VDA5050 specific, JSON
            eStop: "/eStop"                    #VDA5050 specific, String
            fieldViolation: "/fieldViolation"           #VDA5050 specific, bool

order_daemon:
    topics_publish:
        orderMotion: /orderMotion
        prDriving: /prDriving
    topics_subscribe:
        orderFromMc: /order_from_mc
        actionStates: /actionStates
        driving: /driving

action_daemon:
    topics_publish:
        actionToAgv: /action_to_agv
        agvActionCancel: /agvActionCancel
        prActions: /prActions
        prDriving: /prDriving
    topics_subscribe:
        instantAction: /instantAction
        agvActionState: /agvActionState
        driving: /driving

visualization_daemon:
    topics_publish:
        visualization: /viz_to_mc 
    topics_subscribe:
        agvPosition: /agvPosition
        positionInitialized: /positionInitialized
        localizationScore: /localizationScore
        deviationRange: /deviationRange
        rosPose: /rosPose
        mapId: /mapId
        mapDescription: /mapDescription
        velocity: /rosVelocity


connection_daemon:
    #publish topic is defined by vda 5050
    topics_subscribe:
        connectionState: /connected

topic_error: /error_1




