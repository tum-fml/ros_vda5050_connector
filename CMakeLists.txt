cmake_minimum_required(VERSION 3.0.2)
project(vda5050_connector)

## Compile as C++11, supported in ROS Kinetic and newer
add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  vda5050_msgs
  genmsg
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
  LIBRARIES vda5050_connector utils
  CATKIN_DEPENDS roscpp rospy std_msgs
  # DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
 include
  ${catkin_INCLUDE_DIRS}
)

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/vda5050_connector_node.cpp)
add_executable(action_client src/vda5050_connector/action_client.cpp src/vda5050_connector/vda5050node.cpp src/utils/utils.cpp)
add_executable(state_aggregator src/vda5050_connector/state_aggregator.cpp src/vda5050_connector/vda5050node.cpp src/utils/utils.cpp)
add_executable(order_manager src/vda5050_connector/order_manager.cpp src/vda5050_connector/vda5050node.cpp src/utils/utils.cpp)
add_executable(vis_mockup src/mock_ups/vis_mockup.cpp)
add_executable(state_mockup src/mock_ups/state_mockup.cpp)
add_executable(order_mockup src/mock_ups/order_mockup/order_mockup.cpp)
add_executable(position_mockup src/mock_ups/position_mockup.cpp)
add_executable(action_msg_mockup src/mock_ups/action_msg_mockup.cpp)
add_executable(order_msg_mockup src/mock_ups/order_msg_mockup.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(action_client ${catkin_EXPORTED_TARGETS})
add_dependencies(state_aggregator ${catkin_EXPORTED_TARGETS})
add_dependencies(order_manager ${catkin_EXPORTED_TARGETS})
add_dependencies(vis_mockup ${catkin_EXPORTED_TARGETS})
add_dependencies(state_mockup ${catkin_EXPORTED_TARGETS})
add_dependencies(order_mockup ${catkin_EXPORTED_TARGETS})
add_dependencies(position_mockup ${catkin_EXPORTED_TARGETS})
add_dependencies(action_msg_mockup ${catkin_EXPORTED_TARGETS})
add_dependencies(order_msg_mockup ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
target_link_libraries(action_client ${catkin_LIBRARIES})
target_link_libraries(state_aggregator ${catkin_LIBRARIES})
target_link_libraries(order_manager ${catkin_LIBRARIES})
target_link_libraries(vis_mockup ${catkin_LIBRARIES})
target_link_libraries(state_mockup ${catkin_LIBRARIES})
target_link_libraries(order_mockup ${catkin_LIBRARIES})
target_link_libraries(position_mockup ${catkin_LIBRARIES})
target_link_libraries(action_msg_mockup ${catkin_LIBRARIES})
target_link_libraries(order_msg_mockup ${catkin_LIBRARIES})

#   ${catkin_LIBRARIES}
# )

#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
 catkin_add_gtest(${PROJECT_NAME}_node_test test/vda5050node.cpp src/vda5050_connector/vda5050node.cpp src/utils/utils.cpp)
 if(TARGET ${PROJECT_NAME}_node_test)
   target_link_libraries(${PROJECT_NAME}_node_test ${catkin_LIBRARIES})
 endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

##################
## Installation ##
##################

install(TARGETS action_client state_aggregator order_manager vis_mockup state_mockup order_mockup position_mockup action_msg_mockup order_msg_mockup	
	RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

install(DIRECTORY include/${PROJECT_NAME}/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
)

install(DIRECTORY config launch DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})